{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","contexts/ThemeContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","hooks/useTheme.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/types.ts","config/constants/pools.ts","config/constants/farms.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/contracts.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","USDC","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","MaxPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","decimalsCalls","rawEarnings","parsedEarnings","rows","_","c","row","zip","earnings","decimals","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","WMATIC","CAKE","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","CACHE_KEY","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","localStorage","getItem","JSON","parse","setIsDark","prevState","setItem","stringify","theme","dark","light","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","mediaQueries","sm","Page","lg","useTheme","StyledThemeCopntext","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","weth","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","PoolCategory","pools","risk","lpSymbol","decimal","250","4002","contracts","usdc","nonBnbPools","poolsConfig","filter","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingMax","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","56","97","usdt","wmatic","matic","preFarm","preFarmReedem","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","console","error","langObject","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Newpools","Newfarms","NotFound","Presale","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.dee7ec0f.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBalanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      if(farmConfig.isTokenOnly){\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n\r\n        if(farmConfig.tokenSymbol === QuoteToken.USDC && farmConfig.quoteTokenSymbol === QuoteToken.USDC){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      }\r\n      else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBalanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBalanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(tokenDecimals - quoteTokenDecimals));\r\n        }\r\n      }\r\n\r\n\r\n      const [info, totalAllocPoint, MaxPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'MaxPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.times(new BigNumber(10).pow(tokenDecimals - quoteTokenDecimals)).toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        MaxPerBlock: new BigNumber(MaxPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  });\r\n\r\n  // const decimalsCalls = farmsConfig.map((farm) => {\r\n  //   const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\r\n  //   return {\r\n  //     address: lpContractAddress,\r\n  //     name: 'decimals'\r\n  //   }\r\n  // });\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls);\r\n  // const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\r\n\r\n  // const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\r\n\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  });\r\n\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingMax',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const decimalsCalls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'decimals'\r\n    }\r\n  });\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n\r\n  const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\r\n\r\n  const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\r\n\r\n  const parsedEarnings = zip([rawEarnings, tokenDecimals]).map(([earnings, decimals]) => {\r\n    // console.log(18 -decimals[0])\r\n    return new BigNumber(earnings).div(new BigNumber(10).pow(18 - decimals[0])).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 1 // WMATIC-USDC LP\r\n//   const farm = useFarmFromPid(pid)\r\n//   return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\nreturn ZERO;\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const pid = 0; // Dino-USDC LP\r\n//   const farm = useFarmFromPid(pid);\r\n//   return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\nreturn ZERO;\r\n}\r\n\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }\r\n      if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }else{\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n      value = value.plus(val);\r\n    }\r\n  }\r\n  return value;\r\n}\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.weth[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'USDC' = 'USDC',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'WMATIC' = 'WMATIC',\r\n  'MATIC' = 'MATIC',\r\n  'WETH' = 'WETH'\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  4002?: string\r\n  250: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  otherExchange?: string\r\n  risk: number\r\n  decimal: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'WMATIC',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'MAX',\r\n    decimal: 18,\r\n    lpAddresses: {\r\n      250:'0xd45194A6c6F7930FC686d9C8f76fE9b45d981B58',\r\n      4002: '0xCd202b1Fed4B78114862329199F24cE5857B6e2A'\r\n    },\r\n    tokenSymbol: 'DINO',\r\n    tokenAddresses: {\r\n      250:'0xd45194A6c6F7930FC686d9C8f76fE9b45d981B58',\r\n      4002: '0xCd202b1Fed4B78114862329199F24cE5857B6e2A'\r\n    },\r\n    quoteTokenSymbol: QuoteToken.USDC,\r\n    quoteTokenAdresses: contracts.usdc,\r\n  },\r\n//   {\r\n//     pid: 0,\r\n//     risk: 5,\r\n//     lpSymbol: 'MAX-USDC LP',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0x09833c4fbd1d28971b89a84fed3e8c16e45dea7d',\r\n//     },\r\n//     tokenSymbol: 'MAX',\r\n//     tokenAddresses: {\r\n//       137: '0xad04791c59547ccd826a164ffb9061cf12b93fd4',\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 1,\r\n//     risk: 5,\r\n//     lpSymbol: 'MAX-WMATIC LP',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0xdf401ad81944e68188334966f944a3b0c05cc3f3',\r\n//     },\r\n//     tokenSymbol: 'WMATIC',\r\n//     tokenAddresses: {\r\n//       137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.CAKE,\r\n//     quoteTokenAdresses: contracts.cake,\r\n//   },\r\n//   {\r\n//     pid: 2,\r\n//     risk: 5,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'MAX',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0x09833c4fbd1d28971b89a84fed3e8c16e45dea7d'\r\n//     },\r\n//     tokenSymbol: 'MAX',\r\n//     tokenAddresses: {\r\n//       137: '0xad04791c59547ccd826a164ffb9061cf12b93fd4'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 3,\r\n//     risk: 3,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'WMATIC',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827'\r\n//     },\r\n//     tokenSymbol: 'WMATIC',\r\n//     tokenAddresses: {\r\n//       137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 4,\r\n//     risk: 3,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'AAVE',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0x7c76b6b3fe14831a39c0fec908da5f17180df677'\r\n//     },\r\n//     tokenSymbol: 'AAVE',\r\n//     tokenAddresses: {\r\n//       137: '0xd6df932a45c0f255f85145f286ea0b292b21c90b'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 5,\r\n//     risk: 3,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'WBTC',\r\n//     decimal: 6,\r\n//     lpAddresses: {\r\n//       137: '0xf6a637525402643b0654a54bead2cb9a83c8b498'\r\n//     },\r\n//     tokenSymbol: 'WBTC',\r\n//     tokenAddresses: {\r\n//       137: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 6,\r\n//     risk: 3,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'QUICK',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0x1f1e4c845183ef6d50e9609f16f6f9cae43bc9cb'\r\n//     },\r\n//     tokenSymbol: 'QUICK',\r\n//     tokenAddresses: {\r\n//       137: '0x831753dd7087cac61ab5644b308642cc1c33dc13'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 7,\r\n//     risk: 3,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'WETH',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0x853ee4b2a13f8a742d64c8f088be7ba2131f670d'\r\n//     },\r\n//     tokenSymbol: 'WETH',\r\n//     tokenAddresses: {\r\n//       137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 8,\r\n//     risk: 1,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'DAI',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0xf04adbf75cdfc5ed26eea4bbbb991db002036bdd'\r\n//     },\r\n//     tokenSymbol: 'DAI',\r\n//     tokenAddresses: {\r\n//       137: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n//   {\r\n//     pid: 9,\r\n//     risk: 3,\r\n//     isTokenOnly: true,\r\n//     lpSymbol: 'LINK',\r\n//     decimal: 18,\r\n//     lpAddresses: {\r\n//       137: '0x70ceE55c98F6DA2685807611f115eA737d4a248E'\r\n//     },\r\n//     tokenSymbol: 'LINK',\r\n//     tokenAddresses: {\r\n//       137: '0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39'\r\n//     },\r\n//     quoteTokenSymbol: QuoteToken.USDC,\r\n//     quoteTokenAdresses: contracts.usdc,\r\n//   },\r\n\r\n]\r\n\r\nexport default farms\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingMax('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","export default {\r\n  cake: {\r\n    250: '0xd45194A6c6F7930FC686d9C8f76fE9b45d981B58',\r\n    4002:''\r\n  },\r\n  masterChef: {\r\n    250: '0x2d32dAd6f6e177FDB8BaEa81eA7eFE84c6f2eca4',\r\n    4002:''\r\n  },\r\n  weth: {\r\n    250: \"0x74b23882a30290451a17c44f4f05243b6b58c76d\",\r\n    4002:''\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    250: '0xBbff031A5713906D503dAB4084bfEdb622400F87',\r\n    4002:'0x8aD21024dD20B25faD322BFB790fb8187D4945aE'\r\n  },\r\n  usdc: {\r\n    250: '0x04068da6c83afcfa0e13ba15a6696662335d5b75',\r\n    4002:'0x523EF0E84e83F69B0d293D3b86Fd328e4b4AfC97'\r\n  },\r\n  usdt: {\r\n    250: '0x049d68029688eabf473097a2fc38ef61633a3c7a',\r\n    4002:''\r\n  },\r\n  wmatic: {\r\n    250: '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83',\r\n    4002:''\r\n  },\r\n  matic: {\r\n    250: '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83',\r\n    4002:''\r\n  },\r\n  preFarm : {\r\n    250: '0x96e301d552fdab4010049010487fbacd7a4121a1',\r\n    4002: '',\r\n  },\r\n  preFarmReedem : {\r\n    250: '0xf37c39D71Dc964E503D4Eb9BfC346F2394324d2f',\r\n    4002: '',\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n  .but1a {\r\n    -webkit-box-align: center;\r\n    align-items: center;\r\n    background-color: rgb(118, 69, 217);\r\n    border: 2px solid rgb(118, 69, 217);\r\n    border-radius: 16px;\r\n    color: #fff;\r\n    display: inline-flex;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    height: 28px;\r\n    line-height: 1.5;\r\n    padding: 0px 8px;\r\n    white-space: nowrap;\r\n    float: right;\r\n}\r\n.but1abc {\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: 2px solid rgb(48, 168, 134);\r\n  border-radius: 16px;\r\n  color: rgb(48, 168, 134);\r\n  display: inline-flex;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  height: 28px;\r\n  line-height: 1.5;\r\n  padding: 0px 8px;\r\n  white-space: nowrap;\r\n  float: right;\r\n  margin-right: 10px;\r\n}\r\n.backbg{\r\n  background-image: url('/images/web-img/Main_Background.png');\r\n  background-size: cover;\r\n  background-repeat: norepeat;\r\n}\r\n.btn1{\r\n  align-items: center;\r\n  background-color: #E3B93F;\r\n  border: 0;\r\n  border-radius: 16px;\r\n  box-shadow: inset 0px -1px 0px rgba(14,14,44,0.4);\r\n  color: #FFFFFF;\r\n  cursor: pointer;\r\n  display: -webkit-inline-box;\r\n  display: -webkit-inline-flex;\r\n  display: -ms-inline-flexbox;\r\n  display: inline-flex;\r\n  font-family: inherit;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  width: 100%;\r\n  height: 48px;\r\n  line-height: 1;\r\n  -webkit-letter-spacing: 0.03em;\r\n  -moz-letter-spacing: 0.03em;\r\n  -ms-letter-spacing: 0.03em;\r\n  letter-spacing: 0.03em;\r\n  -webkit-box-pack: center;\r\n  -webkit-justify-content: center;\r\n  -ms-flex-pack: center;\r\n  justify-content: center;\r\n  outline: 0;\r\n  padding: 0 15px;\r\n  -webkit-transition: background-color 0.2s;\r\n  transition: background-color 0.2s;\r\n  opacity: 1;\r\n  border: 2px solid #fff;\r\n}\r\n}\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  // ZHCN,\r\n  // ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      // console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://spookyswap.finance/swap?outputCurrency=',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://spookyswap.finance/add',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: \"Presale\",\r\n    icon: 'TicketIcon',\r\n    href: '/presale',\r\n  },\r\n  // {\r\n  //   label: \"Farms\",\r\n  //   icon: 'FarmIcon',\r\n  //   href: '/farms',\r\n  // },\r\n  {\r\n    label: \"Farms\",\r\n    icon: 'FarmIcon',\r\n    href: '/Farms',\r\n  },\r\n  // {\r\n  //   label: \"Pools\",\r\n  //   icon: 'PoolIcon',\r\n  //   href: '/pools',\r\n  // },\r\n  {\r\n    label: \"Pools\",\r\n    icon: 'PoolIcon',\r\n    href: '/Pools',\r\n  },\r\n  // {\r\n  //   label: 'Pools',\r\n  //   icon: 'PoolIcon',\r\n  //   href: '/pools',\r\n  // },\r\n  // {\r\n  //   label: 'Lottery',\r\n  //   icon: 'TicketIcon',\r\n  //   href: '/lottery',\r\n  // },\r\n  {\r\n    label: 'Info',\r\n    icon: 'InfoIcon',\r\n    items: [\r\n      {\r\n\r\n        label: 'spookyswap',\r\n        href: '',\r\n      },\r\n      {\r\n        label: 'Vfat',\r\n        href: '',\r\n      },\r\n      {\r\n        label: 'DappRadar',\r\n        href: ''\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'More',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      {\r\n        label: 'Github',\r\n        href: 'https://github.com/MaximumFarm/maximum-Farm',\r\n      },\r\n      {\r\n        label: 'Docs',\r\n        href: 'https://maximum-farm.gitbook.io/max-farm/',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Audit By Paladin',\r\n    icon: 'AuditIcon',\r\n    href: ''\r\n  },\r\n  {\r\n    label: 'Reviewed by RugDoctor',\r\n    icon: 'AuditIcon',\r\n    href: '',\r\n  },\r\n\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport config from './config'\r\n\r\nconst RDBadge = styled.a`\r\nposition: fixed;\r\nright: 0px;\r\nbottom: 0px;\r\n`\r\n\r\nconst RDLiq = styled.a`\r\nposition: fixed;\r\nright: 15px;\r\nbottom: 90px;\r\n`\r\n\r\nconst KYC = styled.a`\r\nposition: fixed;\r\nright: 15px;\r\nbottom: 165px;\r\n`\r\n\r\nconst JSBadge = styled.a`\r\nposition: fixed;\r\nright: 20px;\r\nbottom: 232px;\r\n`\r\n\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  return (\r\n    <>\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      priceLink=\"https://info.spookyswap.finance/token/\"\r\n      {...props}\r\n    />\r\n     \r\n      {/* <KYC target=\"_blank\" rel=\"noreferrer\" href=\"#\"><img width={218} src=\"https://farmersonly.farm/images/egg/kyc.png\" alt=\"rugdoc kyc\" /></KYC>\r\n      <RDLiq target=\"_blank\" rel=\"noreferrer\" href=\"#\"><img width={218} src=\"https://farmersonly.farm/images/egg/RugDoc-LiqLock-Badge.png\" alt=\"rugdoc liq locked\" /></RDLiq>\r\n      <RDBadge target=\"_blank\" rel=\"noreferrer\" href=\"#\"><img width={250} src=\"https://rugdoc.io/assets/2021/06/rugdoc-review-badge-with-glow.png\" alt=\"rugdoc badge\" /></RDBadge>\r\n      <JSBadge target=\"_blank\" rel=\"noreferrer\" href=\"#\" style={{marginRight: \"-5px\"}}><img width={225} src=\"https://www.farmersonly.farm/images/egg/pala-badge.png\" alt=\"jago badge\" /></JSBadge> */}\r\n </>\r\n )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\n// const Farms = lazy(() => import('./views/Farms'))\r\nconst Newpools = lazy(() => import('./views/Newpools'))\r\nconst Newfarms = lazy(() => import('./views/Newfarms'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\nconst Presale = lazy(()=> import('./views/Presale'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/presale\">\r\n              <Presale />\r\n            </Route>\r\n            {/* <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route> */}\r\n            <Route path=\"/Pools\">\r\n              <Newpools />\r\n            </Route>\r\n            <Route path=\"/Farms\">\r\n              <Newfarms />\r\n            </Route>\r\n            {/* <Route path=\"/pools\">\r\n              <Farms tokenMode/>\r\n            </Route>  */}\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      {/* <NftGlobalNotification /> */}\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n"],"sourceRoot":""}