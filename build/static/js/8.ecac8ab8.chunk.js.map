{"version":3,"sources":["utils/getLiquidityUrlPathParts.ts","hooks/useStake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","config/index.ts","components/Tags.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","utils/compoundApyHelpers.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Newpools/components/FarmCard/DetailsSection.tsx","views/Newpools/components/FarmCard/CardHeading.tsx","views/Newpools/components/DepositModal.tsx","views/Newpools/components/WithdrawModal.tsx","views/Newpools/components/FarmCard/StakeAction.tsx","views/Newpools/components/FarmCard/HarvestAction.tsx","views/Newpools/components/FarmCard/CardActionsContainer.tsx","views/Newpools/components/FarmCard/ApyCalculatorModal.tsx","views/Newpools/components/FarmCard/ApyButton.tsx","views/Newpools/components/FarmCard/FarmCard.tsx","views/Newpools/components/Divider.tsx","views/Newpools/Farms.tsx"],"names":["getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","useStake","pid","decimal","dispatch","useDispatch","useWallet","account","masterChefContract","useMasterchef","handleStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","onStake","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","NoFeeTag","variant","outline","startIcon","ExchangeTag","exchange","useApprove","lpContract","onApprove","approve","tx","useUnstake","onUnstake","unstake","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","otherExchange","liquidityUrlPathParts","externalLink","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","isCommunityFarm","alignItems","mb","src","alt","width","height","flexDirection","flexWrap","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","textSubtle","Cards","BaseLayout","mediaQueries","sm","lg","StyledCakeStats","Card","Row","Actions","Farms","farmsProps","useRouteMatch","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","userData","farmsToDisplay","cakeRewardPerYear","MaxPerBlock","poolWeight","pow","comparedTo","className","Page","as","borderRadius","textAlign","marginTop"],"mappings":"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","file":"static/js/8.ecac8ab8.chunk.js","sourcesContent":["// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number, decimal=18) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account, decimal)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, decimal],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimal: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account, decimal)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 2\r\n\r\nexport const CAKE_POOL_PID = 2\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst ExchangeTag = ({exchange}) => (\r\n  <Tag variant='secondary' outline >\r\n    {exchange}\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag, ExchangeTag }\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number, decimal: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimal)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, decimal],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimal: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account, decimal)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  otherExchange?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  otherExchange\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  let externalLink = isTokenOnly ?\r\n    `https://quickswap.exchange/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n    :\r\n    `https://quickswap.exchange/#/add/${liquidityUrlPathParts}`;\r\n  \r\n  if (otherExchange === 'PolyZap') {\r\n    externalLink = isTokenOnly ?\r\n    `https://polyzap.app/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n    :\r\n    `https://polyzap.app/#/add/${liquidityUrlPathParts}`;\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          externalLink\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on FtmScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag, ExchangeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  isCommunityFarm?: boolean\r\n  otherExchange?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n  isCommunityFarm,\r\n  otherExchange\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"flex-end\" flexWrap=\"wrap\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {otherExchange ? <ExchangeTag exchange={otherExchange} /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, decimal: number) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n  decimal?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0, decimal = 18}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val, decimal)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, decimal: number) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  decimal?: number\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimal}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val, decimal)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n  decimal?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP, decimal}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid, decimal)\r\n  const { onUnstake } = useUnstake(pid, decimal)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance, decimal)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} decimal={decimal}/>,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  decimal?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, decimal}) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid, decimal)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings, decimal)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 12 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP, decimal } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} decimal={decimal} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          MAX\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} decimal={decimal}/>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'MAX per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://quickswap.exchange/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n\r\n\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    // if (farm.quoteTokenSymbol === QuoteToken.MATIC) {\r\n    //   return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    // }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'MAX'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {(farm.tokenSymbol === 'MAX' || farm.tokenSymbol === 'MATIC' || farm.tokenSymbol === 'WMATIC') && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n        otherExchange={farm.otherExchange}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://ftmscan.com/address/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://ftmscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n          otherExchange={farm.otherExchange}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Card, CardBody, Heading, Text, BaseLayout, Button, useModal } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components';\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd} from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.MaxPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        // if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\r\n        //   totalValue = totalValue.times(bnbPrice);\r\n        // }\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          totalValue = totalValue.times(cakePrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [account, cakePrice, ethereum, bnbPrice],\r\n  )\r\n\r\n  return (\r\n    <div className=\"backbg\">\r\n    <Page>\r\n      <div>\r\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\" style={{fontSize: \"40px\"}}>\r\n             Pools\r\n          </Heading>\r\n          {/* <ul>\r\n                          <li>Stake FARM to revieve dividend payouts.</li>\r\n                          <li>You can unstake at any time.</li>\r\n                          <li>Dividends are distributed linearly over the week.</li>\r\n                      </ul> */}\r\n        </div>\r\n        <Divider />\r\n      {/* <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/> */}\r\n      <div>\r\n        {/* <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout> */}\r\n        {/* <h1>sdsdds</h1> */}\r\n      </div>\r\n      <div>\r\n        <Cards className=\"stylecode\">\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>Max</h2>\r\n              {/* <img src=\"images/egg/BTCB.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>PD</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">20X</span><span className=\"but1abc\">No fees</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>0%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>2 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n\r\n\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>WFTM</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>WBNB</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">5X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Unlock</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>BOO</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>CAKE</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">5X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>USDC</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>WETH</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">5X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>ETH</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>BUSD</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">5X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>BTC</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">5X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>USDT</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">5X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>SCREAM</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">3X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>TOMB</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">3X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>GEIST</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">2X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>TAROT</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">3X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>BNB</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">2X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>ICE</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">2X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>DAI</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">2X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n          <StyledCakeStats style={{background: \"rgb(0, 24, 60,0.8)\",borderRadius: \"5px\"}}>\r\n            <CardBody className=\"twitterback\">\r\n            <h2 style={{textAlign: \"left\",fontSize:\"25px\",marginBottom:\"30px\"}}>LINK</h2>\r\n              {/* <img src=\"images/egg/DAI.png\" alt=\"img\" height=\"15%\" width=\"15%\"/> */}\r\n              {/* <h2 style={{textAlign: \"right\",fontSize:\"25px\"}}>ADA</h2> */}\r\n              <p style={{marginTop: \"5px\",marginBottom: \"5px\"}}><span className=\"but1a\">2X</span><span className=\"but1abc\">4%</span></p>\r\n              <br/><br/>\r\n              <Row>\r\n                <Text fontSize=\"14px\">APR:</Text>\r\n                <Text bold>23323232%</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Earn:</Text>\r\n                <Text bold>Pd</Text>\r\n              </Row>\r\n              <Row>\r\n                <Text fontSize=\"14px\">Deposit Fee:</Text>\r\n                <Text bold>4%</Text>\r\n              </Row>\r\n              {/* <Row>\r\n                <Text fontSize=\"14px\">Harvest Lockup: </Text>\r\n                <Text bold>8 Hours</Text>\r\n              </Row> */}\r\n              <Divider />\r\n              <Actions>\r\n              <Button  fullWidth > Purchase</Button> \r\n              </Actions>\r\n            </CardBody>\r\n          </StyledCakeStats>\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: 100;\r\n  margin-right: 100;\r\n  grid-column: span 4 !important;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\nexport default Farms\r\n"],"sourceRoot":""}