{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","style","color","CakeHarvestBalance","earningsSum","TranslateString","useI18n","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","border","size","mb","src","alt","paddingLeft","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","Rowa","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","MaxPerBlock","console","log","window","request","method","type","options","symbol","image","error","className","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","useTheme","isDark","toggleTheme","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Heroa","Cards","BaseLayout","sm","Home","Page","marginRight","as","FarmStakingCard"],"mappings":"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","file":"static/js/16.73bca096.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMax',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize} style={{color:\"#E3B93F\"}}>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMax',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\nposition: relative;\r\noverflow: hidden;\r\nz-index: 2;\r\nbackground: rgb(0, 24, 60,0.8);\r\n\r\n&:before {\r\n  content: ' ';\r\n    display: block;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: -1;\r\n    opacity: 0.2;\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n  }\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard style={{border: \"2px solid #fff\"}}>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\" style={{color: \"#E3B93F\"}}>\r\n          {TranslateString(542, 'Farms & Staking')}\r\n          <img src=\"/images/web-img/Yellow_logo.png\" alt=\"logo\" style={{paddingLeft:\"20px\"}}/>\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={40} height={40} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'EGG to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label style={{color: \"rgb(227, 185, 63)\"}}>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label style={{color: \"rgb(227, 185, 63)\"}}>{TranslateString(546, 'EGG in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label style={{color: \"rgb(227, 185, 63)\"}}>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\ndeclare let window;\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background: rgb(0, 24, 60,0.8);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst Rowa = styled.div`\r\n  align-items: right;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n\r\n  let MaxPerBlock = 1;\r\n  if(farms && farms[0] && farms[0].MaxPerBlock){\r\n    MaxPerBlock = new BigNumber(farms[0].MaxPerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n  console.log(\"window\", window);\r\n\r\n  const addBarnsToken = () => {\r\n    const tokenAddress = '0xd45194A6c6F7930FC686d9C8f76fE9b45d981B58';\r\n    const tokenSymbol = 'Max';\r\n    const tokenDecimals = 18;\r\n    const tokenImage = 'https://maximum.farm/images/web-img/Yellow_logo.png';\r\n\r\n   \r\n    try {\r\n      if(window.ethereum){\r\n        const wasAdded = window.ethereum.request({\r\n          method: 'wallet_watchAsset',\r\n          params: {\r\n              type: 'ERC20', // Initially only supports ERC20, but eventually more!\r\n              options: {\r\n                  address: tokenAddress, // The address that the token is at.\r\n                  symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\r\n                  decimals: tokenDecimals, // The number of decimals in the token\r\n                  image: tokenImage, // A string url of the token logo\r\n              },\r\n          },\r\n      });\r\n      }\r\n      \r\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\r\n       \r\n    } catch (error) {\r\n        // console.log(error);\r\n    }\r\n}\r\n\r\n  return (\r\n    <StyledCakeStats style={{border: \"2px solid #fff\"}}>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\" style={{color:\"#E3B93F\"}}>\r\n        MAX Stats\r\n        \r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\r\n          <Text bold fontSize=\"14px\">{MaxPerBlock}</Text>\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(5400, 'Max Supply')}</Text>\r\n          <Text bold fontSize=\"14px\">50,000</Text>\r\n        </Row>\r\n        <Rowa >\r\n          <button onClick={addBarnsToken} type=\"submit\"  className=\"btn1\">Add Max to Metamask</button>\r\n        </Rowa>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  background: rgb(0, 24, 60,0.8);\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard style={{border: \"2px solid #fff\"}}>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\" style={{color:\"#E3B93F\"}}>\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\" style={{color:\"#E3B93F\"}}>{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\nimport useTheme from '../../../hooks/useTheme'\r\n\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background: rgb(0, 24, 60,0.8);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  const { isDark, toggleTheme, theme } = useTheme();\r\n\r\n  return (\r\n    <StyledTwitterCard style={{border: \"2px solid #fff\"}}>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\" style={{color:\"#E3B93F\"}}>\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'DinoFinance'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\",\r\n            theme: isDark ? 'dark' : 'light'\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport Timer from './components/Timer'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n  position: relative;\r\n  z-index:2;\r\n  border-radius: 30px;\r\n\r\n  &:before {\r\n    content: ' ';\r\n    display: block;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: -1;\r\n    opacity: 0.1;\r\n    background-image: url('/images/egg/3.png');\r\n    background-repeat: no-repeat;\r\n    background-position: top center;\r\n    border-radius: 30px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n\r\n    padding-top: 0;\r\n    position: relative;\r\n    z-index: 2;\r\n    height: 165px;\r\n\r\n    &:before {\r\n      content: ' ';\r\n      display: block;\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      z-index: -1;\r\n      opacity: 1;\r\n      background-image: url('/images/egg/3b.jpg');\r\n    background-position: left center, right center;\r\n    background-repeat: no-repeat;\r\n    }\r\n  }\r\n`\r\nconst Heroa = styled.div`\r\n.parent {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.child {\r\n  flex: 1 0 18%; /* explanation below */\r\n  margin: 5px;\r\n  height: 100px;\r\n}\r\n.childaa{\r\n  height:  88px;\r\n  margin-top:-7px;\r\n}\r\n.childab{\r\n  height:  120px;\r\n  margin-top:-25px;\r\n}\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <div className=\"backbg\">\r\n    <Page>\r\n      {/* <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\" >\r\n          {TranslateString(579, 'Yield Farming has begun.')}\r\n        </Heading> */}\r\n        {/* <Timer /> */}\r\n      <Hero style={{border: \"2px solid #E3B93F\", marginRight: \"14px\"}}>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'PolyDino Finance')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'Last generation yield farming based on polygon')}</Text>\r\n      </Hero>\r\n\r\n      <div>\r\n      \r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard/>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n      <Heroa>\r\n      <div className=\"parent\">\r\n        <div className=\"child\">\r\n        <img width={250} className=\"childaa\" src=\"https://rugdoc.io/assets/2021/06/rugdoc-review-badge-with-glow.png\" alt=\"rugdoc badge\" />\r\n        \r\n        </div>\r\n        <div className=\"child\">\r\n        <img width={218} src=\"https://farmersonly.farm/images/egg/RugDoc-LiqLock-Badge.png\" alt=\"rugdoc liq locked\" />\r\n        </div>\r\n        <div className=\"child\">\r\n        <img width={218} src=\"https://farmersonly.farm/images/egg/kyc.png\" alt=\"rugdoc kyc\" />\r\n        </div>\r\n        <div className=\"child\">\r\n        <img width={225} className=\"childaa\" src=\"https://www.farmersonly.farm/images/egg/pala-badge.png\" alt=\"jago badge\" />\r\n        </div>\r\n        <div className=\"child\">\r\n        <img width={160} className=\"childab\" src=\"https://jagosafer.io/flags/greenflag.svg\" alt=\"jago flag\" />\r\n        </div>\r\n      </div>\r\n      </Heroa>\r\n    </Page>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}